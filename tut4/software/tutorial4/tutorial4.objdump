
tutorial4.elf:     file format elf32-littlenios2
tutorial4.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00000020

Program Header:
    LOAD off    0x00001000 vaddr 0x00000000 paddr 0x00000000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00000020 paddr 0x00000020 align 2**12
         filesz 0x00000934 memsz 0x00000934 flags r-x
    LOAD off    0x00001954 vaddr 0x00000954 paddr 0x00000a44 align 2**12
         filesz 0x000000f0 memsz 0x000000f0 flags rw-
    LOAD off    0x00001b34 vaddr 0x00000b34 paddr 0x00000b34 align 2**12
         filesz 0x00000000 memsz 0x00000010 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00000000  00000000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000000  00000020  00000020  00001a44  2**0
                  CONTENTS
  2 .text         0000091c  00000020  00000020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000018  0000093c  0000093c  0000193c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000f0  00000954  00000a44  00001954  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000010  00000b34  00000b34  00001b34  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00000b44  00000b44  00001a44  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00001a44  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000298  00000000  00000000  00001a68  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000293b  00000000  00000000  00001d00  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00000f20  00000000  00000000  0000463b  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   0000122e  00000000  00000000  0000555b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000424  00000000  00000000  0000678c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00000d43  00000000  00000000  00006bb0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000007cb  00000000  00000000  000078f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000040  00000000  00000000  000080c0  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 000000e0  00000000  00000000  00008100  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  0000923a  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  0000923d  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00009249  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  0000924a  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   0000000b  00000000  00000000  0000924b  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    0000000b  00000000  00000000  00009256  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   0000000b  00000000  00000000  00009261  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 0000000b  00000000  00000000  0000926c  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000001b  00000000  00000000  00009277  2**0
                  CONTENTS, READONLY
 26 .jdi          0000423a  00000000  00000000  00009292  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     00034fe8  00000000  00000000  0000d4cc  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00000000 l    d  .entry	00000000 .entry
00000020 l    d  .exceptions	00000000 .exceptions
00000020 l    d  .text	00000000 .text
0000093c l    d  .rodata	00000000 .rodata
00000954 l    d  .rwdata	00000000 .rwdata
00000b34 l    d  .bss	00000000 .bss
00000b44 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../tutorial4_bsp//obj/HAL/src/crt0.o
00000058 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 hello_world.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00000954 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 alt_load.c
00000270 l     F .text	00000068 alt_load_section
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_usleep.c
00000000 l    df *ABS*	00000000 alt_write.c
000003e0 l     F .text	0000003c alt_get_errno
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_jtag_uart_write.c
00000000 l    df *ABS*	00000000 alt_busy_sleep.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_qsys_irq.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 lib2-mul.c
0000035c g     F .text	00000054 alt_main
000000b0 g     F .text	00000080 _puts_r
00000a44 g       *ABS*	00000000 __flash_rwdata_start
00000000 g     F .entry	0000000c __reset
00000020 g       *ABS*	00000000 __flash_exceptions_start
00000b34 g     O .bss	00000004 errno
00000b3c g     O .bss	00000004 alt_argv
00008a34 g       *ABS*	00000000 _gp
000003b0 g     F .text	00000030 usleep
00000130 g     F .text	00000014 puts
00000000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00000858 g     F .text	00000064 .hidden __udivsi3
00000a34 g     O .rwdata	00000004 _global_impure_ptr
00000b44 g       *ABS*	00000000 __bss_end
000006fc g     F .text	00000020 alt_dcache_flush_all
00000a44 g       *ABS*	00000000 __ram_rwdata_end
0000041c g     F .text	0000009c write
00000954 g       *ABS*	00000000 __ram_rodata_end
00000a3c g     O .rwdata	00000004 jtag_uart_0
000008bc g     F .text	00000058 .hidden __umodsi3
00000b44 g       *ABS*	00000000 end
00008000 g       *ABS*	00000000 __alt_stack_pointer
00000510 g     F .text	00000094 altera_avalon_jtag_uart_write
00000020 g     F .text	0000003c _start
000004f0 g     F .text	00000020 alt_sys_init
00000914 g     F .text	00000028 .hidden __mulsi3
00000954 g       *ABS*	00000000 __ram_rwdata_start
0000093c g       *ABS*	00000000 __ram_rodata_start
000005a4 g     F .text	00000158 alt_busy_sleep
00000b44 g       *ABS*	00000000 __alt_stack_base
00000160 g     F .text	000000b8 __sfvwrite_small_dev
00000b34 g       *ABS*	00000000 __bss_start
0000005c g     F .text	00000054 main
00000b40 g     O .bss	00000004 alt_envp
00000a40 g     O .rwdata	00000004 alt_errno
00000760 g     F .text	00000084 .hidden __divsi3
0000093c g       *ABS*	00000000 __flash_rodata_start
000004b8 g     F .text	00000038 alt_irq_init
00000218 g     F .text	00000058 _write_r
00000a38 g     O .rwdata	00000004 _impure_ptr
00000b38 g     O .bss	00000004 alt_argc
00000020 g       *ABS*	00000000 __ram_exceptions_start
00000a44 g       *ABS*	00000000 _edata
00000b44 g       *ABS*	00000000 _end
00000020 g       *ABS*	00000000 __ram_exceptions_end
0000073c g     F .text	00000024 altera_nios2_qsys_irq_init
000007e4 g     F .text	00000074 .hidden __modsi3
00008000 g       *ABS*	00000000 __alt_data_end
0000000c g       .entry	00000000 _exit
00000144 g     F .text	0000001c strlen
0000071c g     F .text	00000020 alt_icache_flush_all
000002d8 g     F .text	00000084 alt_load



Disassembly of section .entry:

00000000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
   0:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
   4:	08400814 	ori	at,at,32
    jmp r1
   8:	0800683a 	jmp	at

0000000c <_exit>:
	...

Disassembly of section .text:

00000020 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
  20:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
  24:	dee00014 	ori	sp,sp,32768
    movhi gp, %hi(_gp)
  28:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
  2c:	d6a28d14 	ori	gp,gp,35380
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
  30:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
  34:	1082cd14 	ori	r2,r2,2868

    movhi r3, %hi(__bss_end)
  38:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
  3c:	18c2d114 	ori	r3,r3,2884

    beq r2, r3, 1f
  40:	10c00326 	beq	r2,r3,50 <_start+0x30>

0:
    stw zero, (r2)
  44:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
  48:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
  4c:	10fffd36 	bltu	r2,r3,44 <_gp+0xffff7610>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
  50:	00002d80 	call	2d8 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
  54:	000035c0 	call	35c <alt_main>

00000058 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
  58:	003fff06 	br	58 <_gp+0xffff7624>

0000005c <main>:
#include <stdio.h>
#include "system.h"
#include <unistd.h>

int main()
{
  5c:	defffd04 	addi	sp,sp,-12
  60:	dfc00215 	stw	ra,8(sp)
  64:	df000115 	stw	fp,4(sp)
  68:	df000104 	addi	fp,sp,4
	printf("Hello from Nios II!\n");
  6c:	01000034 	movhi	r4,0
  70:	21024f04 	addi	r4,r4,2364
  74:	00001300 	call	130 <puts>
	char * LEDs = (char *)LEDS_BASE;
  78:	00a40014 	movui	r2,36864
  7c:	e0bfff15 	stw	r2,-4(fp)

	while (1) {
		*LEDs = 0xFF;
  80:	e0bfff17 	ldw	r2,-4(fp)
  84:	00ffffc4 	movi	r3,-1
  88:	10c00005 	stb	r3,0(r2)
		usleep(1000*1000);
  8c:	010003f4 	movhi	r4,15
  90:	21109004 	addi	r4,r4,16960
  94:	00003b00 	call	3b0 <usleep>
		*LEDs=0x00;
  98:	e0bfff17 	ldw	r2,-4(fp)
  9c:	10000005 	stb	zero,0(r2)
		usleep(1000*1000);
  a0:	010003f4 	movhi	r4,15
  a4:	21109004 	addi	r4,r4,16960
  a8:	00003b00 	call	3b0 <usleep>
	}
  ac:	003ff406 	br	80 <_gp+0xffff764c>

000000b0 <_puts_r>:
  b0:	defffd04 	addi	sp,sp,-12
  b4:	dc000015 	stw	r16,0(sp)
  b8:	2021883a 	mov	r16,r4
  bc:	2809883a 	mov	r4,r5
  c0:	dfc00215 	stw	ra,8(sp)
  c4:	dc400115 	stw	r17,4(sp)
  c8:	2823883a 	mov	r17,r5
  cc:	00001440 	call	144 <strlen>
  d0:	81400217 	ldw	r5,8(r16)
  d4:	01000034 	movhi	r4,0
  d8:	21005804 	addi	r4,r4,352
  dc:	29000115 	stw	r4,4(r5)
  e0:	100f883a 	mov	r7,r2
  e4:	880d883a 	mov	r6,r17
  e8:	8009883a 	mov	r4,r16
  ec:	00001600 	call	160 <__sfvwrite_small_dev>
  f0:	00ffffc4 	movi	r3,-1
  f4:	10c00926 	beq	r2,r3,11c <_puts_r+0x6c>
  f8:	81400217 	ldw	r5,8(r16)
  fc:	01800034 	movhi	r6,0
 100:	01c00044 	movi	r7,1
 104:	28800117 	ldw	r2,4(r5)
 108:	31825404 	addi	r6,r6,2384
 10c:	8009883a 	mov	r4,r16
 110:	103ee83a 	callr	r2
 114:	10bfffe0 	cmpeqi	r2,r2,-1
 118:	0085c83a 	sub	r2,zero,r2
 11c:	dfc00217 	ldw	ra,8(sp)
 120:	dc400117 	ldw	r17,4(sp)
 124:	dc000017 	ldw	r16,0(sp)
 128:	dec00304 	addi	sp,sp,12
 12c:	f800283a 	ret

00000130 <puts>:
 130:	00800034 	movhi	r2,0
 134:	10828e04 	addi	r2,r2,2616
 138:	200b883a 	mov	r5,r4
 13c:	11000017 	ldw	r4,0(r2)
 140:	00000b01 	jmpi	b0 <_puts_r>

00000144 <strlen>:
 144:	2005883a 	mov	r2,r4
 148:	10c00007 	ldb	r3,0(r2)
 14c:	18000226 	beq	r3,zero,158 <strlen+0x14>
 150:	10800044 	addi	r2,r2,1
 154:	003ffc06 	br	148 <_gp+0xffff7714>
 158:	1105c83a 	sub	r2,r2,r4
 15c:	f800283a 	ret

00000160 <__sfvwrite_small_dev>:
 160:	2880000b 	ldhu	r2,0(r5)
 164:	1080020c 	andi	r2,r2,8
 168:	10002126 	beq	r2,zero,1f0 <__sfvwrite_small_dev+0x90>
 16c:	2880008f 	ldh	r2,2(r5)
 170:	defffa04 	addi	sp,sp,-24
 174:	dc000015 	stw	r16,0(sp)
 178:	dfc00515 	stw	ra,20(sp)
 17c:	dd000415 	stw	r20,16(sp)
 180:	dcc00315 	stw	r19,12(sp)
 184:	dc800215 	stw	r18,8(sp)
 188:	dc400115 	stw	r17,4(sp)
 18c:	2821883a 	mov	r16,r5
 190:	10001216 	blt	r2,zero,1dc <__sfvwrite_small_dev+0x7c>
 194:	2027883a 	mov	r19,r4
 198:	3025883a 	mov	r18,r6
 19c:	3823883a 	mov	r17,r7
 1a0:	05010004 	movi	r20,1024
 1a4:	04400b0e 	bge	zero,r17,1d4 <__sfvwrite_small_dev+0x74>
 1a8:	880f883a 	mov	r7,r17
 1ac:	a440010e 	bge	r20,r17,1b4 <__sfvwrite_small_dev+0x54>
 1b0:	01c10004 	movi	r7,1024
 1b4:	8140008f 	ldh	r5,2(r16)
 1b8:	900d883a 	mov	r6,r18
 1bc:	9809883a 	mov	r4,r19
 1c0:	00002180 	call	218 <_write_r>
 1c4:	0080050e 	bge	zero,r2,1dc <__sfvwrite_small_dev+0x7c>
 1c8:	88a3c83a 	sub	r17,r17,r2
 1cc:	90a5883a 	add	r18,r18,r2
 1d0:	003ff406 	br	1a4 <_gp+0xffff7770>
 1d4:	0005883a 	mov	r2,zero
 1d8:	00000706 	br	1f8 <__sfvwrite_small_dev+0x98>
 1dc:	8080000b 	ldhu	r2,0(r16)
 1e0:	10801014 	ori	r2,r2,64
 1e4:	8080000d 	sth	r2,0(r16)
 1e8:	00bfffc4 	movi	r2,-1
 1ec:	00000206 	br	1f8 <__sfvwrite_small_dev+0x98>
 1f0:	00bfffc4 	movi	r2,-1
 1f4:	f800283a 	ret
 1f8:	dfc00517 	ldw	ra,20(sp)
 1fc:	dd000417 	ldw	r20,16(sp)
 200:	dcc00317 	ldw	r19,12(sp)
 204:	dc800217 	ldw	r18,8(sp)
 208:	dc400117 	ldw	r17,4(sp)
 20c:	dc000017 	ldw	r16,0(sp)
 210:	dec00604 	addi	sp,sp,24
 214:	f800283a 	ret

00000218 <_write_r>:
 218:	defffd04 	addi	sp,sp,-12
 21c:	dc000015 	stw	r16,0(sp)
 220:	04000034 	movhi	r16,0
 224:	dc400115 	stw	r17,4(sp)
 228:	8402cd04 	addi	r16,r16,2868
 22c:	2023883a 	mov	r17,r4
 230:	2809883a 	mov	r4,r5
 234:	300b883a 	mov	r5,r6
 238:	380d883a 	mov	r6,r7
 23c:	dfc00215 	stw	ra,8(sp)
 240:	80000015 	stw	zero,0(r16)
 244:	000041c0 	call	41c <write>
 248:	00ffffc4 	movi	r3,-1
 24c:	10c0031e 	bne	r2,r3,25c <_write_r+0x44>
 250:	80c00017 	ldw	r3,0(r16)
 254:	18000126 	beq	r3,zero,25c <_write_r+0x44>
 258:	88c00015 	stw	r3,0(r17)
 25c:	dfc00217 	ldw	ra,8(sp)
 260:	dc400117 	ldw	r17,4(sp)
 264:	dc000017 	ldw	r16,0(sp)
 268:	dec00304 	addi	sp,sp,12
 26c:	f800283a 	ret

00000270 <alt_load_section>:
 */

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
 270:	defffc04 	addi	sp,sp,-16
 274:	df000315 	stw	fp,12(sp)
 278:	df000304 	addi	fp,sp,12
 27c:	e13ffd15 	stw	r4,-12(fp)
 280:	e17ffe15 	stw	r5,-8(fp)
 284:	e1bfff15 	stw	r6,-4(fp)
  if (to != from)
 288:	e0fffe17 	ldw	r3,-8(fp)
 28c:	e0bffd17 	ldw	r2,-12(fp)
 290:	18800c26 	beq	r3,r2,2c4 <alt_load_section+0x54>
  {
    while( to != end )
 294:	00000806 	br	2b8 <alt_load_section+0x48>
    {
      *to++ = *from++;
 298:	e0bffe17 	ldw	r2,-8(fp)
 29c:	10c00104 	addi	r3,r2,4
 2a0:	e0fffe15 	stw	r3,-8(fp)
 2a4:	e0fffd17 	ldw	r3,-12(fp)
 2a8:	19000104 	addi	r4,r3,4
 2ac:	e13ffd15 	stw	r4,-12(fp)
 2b0:	18c00017 	ldw	r3,0(r3)
 2b4:	10c00015 	stw	r3,0(r2)
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
  {
    while( to != end )
 2b8:	e0fffe17 	ldw	r3,-8(fp)
 2bc:	e0bfff17 	ldw	r2,-4(fp)
 2c0:	18bff51e 	bne	r3,r2,298 <_gp+0xffff7864>
    {
      *to++ = *from++;
    }
  }
}
 2c4:	0001883a 	nop
 2c8:	e037883a 	mov	sp,fp
 2cc:	df000017 	ldw	fp,0(sp)
 2d0:	dec00104 	addi	sp,sp,4
 2d4:	f800283a 	ret

000002d8 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
 2d8:	defffe04 	addi	sp,sp,-8
 2dc:	dfc00115 	stw	ra,4(sp)
 2e0:	df000015 	stw	fp,0(sp)
 2e4:	d839883a 	mov	fp,sp
  /* 
   * Copy the .rwdata section. 
   */

  alt_load_section (&__flash_rwdata_start, 
 2e8:	01800034 	movhi	r6,0
 2ec:	31829104 	addi	r6,r6,2628
 2f0:	01400034 	movhi	r5,0
 2f4:	29425504 	addi	r5,r5,2388
 2f8:	01000034 	movhi	r4,0
 2fc:	21029104 	addi	r4,r4,2628
 300:	00002700 	call	270 <alt_load_section>

  /*
   * Copy the exception handler.
   */

  alt_load_section (&__flash_exceptions_start, 
 304:	01800034 	movhi	r6,0
 308:	31800804 	addi	r6,r6,32
 30c:	01400034 	movhi	r5,0
 310:	29400804 	addi	r5,r5,32
 314:	01000034 	movhi	r4,0
 318:	21000804 	addi	r4,r4,32
 31c:	00002700 	call	270 <alt_load_section>

  /*
   * Copy the .rodata section.
   */

  alt_load_section (&__flash_rodata_start, 
 320:	01800034 	movhi	r6,0
 324:	31825504 	addi	r6,r6,2388
 328:	01400034 	movhi	r5,0
 32c:	29424f04 	addi	r5,r5,2364
 330:	01000034 	movhi	r4,0
 334:	21024f04 	addi	r4,r4,2364
 338:	00002700 	call	270 <alt_load_section>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
 33c:	00006fc0 	call	6fc <alt_dcache_flush_all>
  alt_icache_flush_all();
 340:	000071c0 	call	71c <alt_icache_flush_all>
}
 344:	0001883a 	nop
 348:	e037883a 	mov	sp,fp
 34c:	dfc00117 	ldw	ra,4(sp)
 350:	df000017 	ldw	fp,0(sp)
 354:	dec00204 	addi	sp,sp,8
 358:	f800283a 	ret

0000035c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
 35c:	defffe04 	addi	sp,sp,-8
 360:	dfc00115 	stw	ra,4(sp)
 364:	df000015 	stw	fp,0(sp)
 368:	d839883a 	mov	fp,sp
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
 36c:	0009883a 	mov	r4,zero
 370:	00004b80 	call	4b8 <alt_irq_init>

  /* Initialize the operating system */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done alt_irq_init, calling alt_os_init.\r\n");
  ALT_OS_INIT();
 374:	0001883a 	nop
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
 378:	00004f00 	call	4f0 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
 37c:	d0a04117 	ldw	r2,-32508(gp)
 380:	d0e04217 	ldw	r3,-32504(gp)
 384:	d1204317 	ldw	r4,-32500(gp)
 388:	200d883a 	mov	r6,r4
 38c:	180b883a 	mov	r5,r3
 390:	1009883a 	mov	r4,r2
 394:	000005c0 	call	5c <main>
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
 398:	0001883a 	nop
 39c:	e037883a 	mov	sp,fp
 3a0:	dfc00117 	ldw	ra,4(sp)
 3a4:	df000017 	ldw	fp,0(sp)
 3a8:	dec00204 	addi	sp,sp,8
 3ac:	f800283a 	ret

000003b0 <usleep>:
#if defined (__GNUC__) && __GNUC__ >= 4
int ALT_USLEEP (useconds_t us)
#else
unsigned int ALT_USLEEP (unsigned int us)
#endif
{
 3b0:	defffd04 	addi	sp,sp,-12
 3b4:	dfc00215 	stw	ra,8(sp)
 3b8:	df000115 	stw	fp,4(sp)
 3bc:	df000104 	addi	fp,sp,4
 3c0:	e13fff15 	stw	r4,-4(fp)
  return alt_busy_sleep(us);
 3c4:	e13fff17 	ldw	r4,-4(fp)
 3c8:	00005a40 	call	5a4 <alt_busy_sleep>
}
 3cc:	e037883a 	mov	sp,fp
 3d0:	dfc00117 	ldw	ra,4(sp)
 3d4:	df000017 	ldw	fp,0(sp)
 3d8:	dec00204 	addi	sp,sp,8
 3dc:	f800283a 	ret

000003e0 <alt_get_errno>:
#undef errno

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
 3e0:	defffe04 	addi	sp,sp,-8
 3e4:	dfc00115 	stw	ra,4(sp)
 3e8:	df000015 	stw	fp,0(sp)
 3ec:	d839883a 	mov	fp,sp
  return ((alt_errno) ? alt_errno() : &errno);
 3f0:	d0a00317 	ldw	r2,-32756(gp)
 3f4:	10000326 	beq	r2,zero,404 <alt_get_errno+0x24>
 3f8:	d0a00317 	ldw	r2,-32756(gp)
 3fc:	103ee83a 	callr	r2
 400:	00000106 	br	408 <alt_get_errno+0x28>
 404:	d0a04004 	addi	r2,gp,-32512
}
 408:	e037883a 	mov	sp,fp
 40c:	dfc00117 	ldw	ra,4(sp)
 410:	df000017 	ldw	fp,0(sp)
 414:	dec00204 	addi	sp,sp,8
 418:	f800283a 	ret

0000041c <write>:
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
 41c:	defffb04 	addi	sp,sp,-20
 420:	dfc00415 	stw	ra,16(sp)
 424:	df000315 	stw	fp,12(sp)
 428:	df000304 	addi	fp,sp,12
 42c:	e13ffd15 	stw	r4,-12(fp)
 430:	e17ffe15 	stw	r5,-8(fp)
 434:	e1bfff15 	stw	r6,-4(fp)
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
 438:	e0bffd17 	ldw	r2,-12(fp)
 43c:	10c00060 	cmpeqi	r3,r2,1
 440:	1800031e 	bne	r3,zero,450 <write+0x34>
 444:	108000a0 	cmpeqi	r2,r2,2
 448:	1000091e 	bne	r2,zero,470 <write+0x54>
 44c:	00001006 	br	490 <write+0x74>
#ifdef ALT_STDOUT_PRESENT
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
 450:	e0bfff17 	ldw	r2,-4(fp)
 454:	000f883a 	mov	r7,zero
 458:	100d883a 	mov	r6,r2
 45c:	e17ffe17 	ldw	r5,-8(fp)
 460:	01000034 	movhi	r4,0
 464:	21028f04 	addi	r4,r4,2620
 468:	00005100 	call	510 <altera_avalon_jtag_uart_write>
 46c:	00000d06 	br	4a4 <write+0x88>
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
 470:	e0bfff17 	ldw	r2,-4(fp)
 474:	000f883a 	mov	r7,zero
 478:	100d883a 	mov	r6,r2
 47c:	e17ffe17 	ldw	r5,-8(fp)
 480:	01000034 	movhi	r4,0
 484:	21028f04 	addi	r4,r4,2620
 488:	00005100 	call	510 <altera_avalon_jtag_uart_write>
 48c:	00000506 	br	4a4 <write+0x88>
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
 490:	00003e00 	call	3e0 <alt_get_errno>
 494:	1007883a 	mov	r3,r2
 498:	00801444 	movi	r2,81
 49c:	18800015 	stw	r2,0(r3)
        return -1;
 4a0:	00bfffc4 	movi	r2,-1
    }
}
 4a4:	e037883a 	mov	sp,fp
 4a8:	dfc00117 	ldw	ra,4(sp)
 4ac:	df000017 	ldw	fp,0(sp)
 4b0:	dec00204 	addi	sp,sp,8
 4b4:	f800283a 	ret

000004b8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
 4b8:	defffd04 	addi	sp,sp,-12
 4bc:	dfc00215 	stw	ra,8(sp)
 4c0:	df000115 	stw	fp,4(sp)
 4c4:	df000104 	addi	fp,sp,4
 4c8:	e13fff15 	stw	r4,-4(fp)
    ALTERA_NIOS2_QSYS_IRQ_INIT ( NIOS2_QSYS_0, nios2_qsys_0);
 4cc:	000073c0 	call	73c <altera_nios2_qsys_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
 4d0:	00800044 	movi	r2,1
 4d4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
 4d8:	0001883a 	nop
 4dc:	e037883a 	mov	sp,fp
 4e0:	dfc00117 	ldw	ra,4(sp)
 4e4:	df000017 	ldw	fp,0(sp)
 4e8:	dec00204 	addi	sp,sp,8
 4ec:	f800283a 	ret

000004f0 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
 4f0:	deffff04 	addi	sp,sp,-4
 4f4:	df000015 	stw	fp,0(sp)
 4f8:	d839883a 	mov	fp,sp
    ALTERA_AVALON_JTAG_UART_INIT ( JTAG_UART_0, jtag_uart_0);
}
 4fc:	0001883a 	nop
 500:	e037883a 	mov	sp,fp
 504:	df000017 	ldw	fp,0(sp)
 508:	dec00104 	addi	sp,sp,4
 50c:	f800283a 	ret

00000510 <altera_avalon_jtag_uart_write>:
 * one FIFOs worth of data.  But you said you didn't want to use interrupts :-)
 */

int altera_avalon_jtag_uart_write(altera_avalon_jtag_uart_state* sp, 
  const char * ptr, int count, int flags)
{
 510:	defff904 	addi	sp,sp,-28
 514:	df000615 	stw	fp,24(sp)
 518:	df000604 	addi	fp,sp,24
 51c:	e13ffc15 	stw	r4,-16(fp)
 520:	e17ffd15 	stw	r5,-12(fp)
 524:	e1bffe15 	stw	r6,-8(fp)
 528:	e1ffff15 	stw	r7,-4(fp)
  unsigned int base = sp->base;
 52c:	e0bffc17 	ldw	r2,-16(fp)
 530:	10800017 	ldw	r2,0(r2)
 534:	e0bffa15 	stw	r2,-24(fp)

  const char * end = ptr + count;
 538:	e0bffe17 	ldw	r2,-8(fp)
 53c:	e0fffd17 	ldw	r3,-12(fp)
 540:	1885883a 	add	r2,r3,r2
 544:	e0bffb15 	stw	r2,-20(fp)

  while (ptr < end)
 548:	00000e06 	br	584 <altera_avalon_jtag_uart_write+0x74>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
 54c:	e0bffa17 	ldw	r2,-24(fp)
 550:	10800104 	addi	r2,r2,4
 554:	10800037 	ldwio	r2,0(r2)
 558:	10bfffec 	andhi	r2,r2,65535
 55c:	10000926 	beq	r2,zero,584 <altera_avalon_jtag_uart_write+0x74>
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);
 560:	e0fffa17 	ldw	r3,-24(fp)
 564:	e0bffd17 	ldw	r2,-12(fp)
 568:	11000044 	addi	r4,r2,1
 56c:	e13ffd15 	stw	r4,-12(fp)
 570:	10800003 	ldbu	r2,0(r2)
 574:	10803fcc 	andi	r2,r2,255
 578:	1080201c 	xori	r2,r2,128
 57c:	10bfe004 	addi	r2,r2,-128
 580:	18800035 	stwio	r2,0(r3)
{
  unsigned int base = sp->base;

  const char * end = ptr + count;

  while (ptr < end)
 584:	e0fffd17 	ldw	r3,-12(fp)
 588:	e0bffb17 	ldw	r2,-20(fp)
 58c:	18bfef36 	bltu	r3,r2,54c <_gp+0xffff7b18>
    if ((IORD_ALTERA_AVALON_JTAG_UART_CONTROL(base) & ALTERA_AVALON_JTAG_UART_CONTROL_WSPACE_MSK) != 0)
      IOWR_ALTERA_AVALON_JTAG_UART_DATA(base, *ptr++);

  return count;
 590:	e0bffe17 	ldw	r2,-8(fp)
}
 594:	e037883a 	mov	sp,fp
 598:	df000017 	ldw	fp,0(sp)
 59c:	dec00104 	addi	sp,sp,4
 5a0:	f800283a 	ret

000005a4 <alt_busy_sleep>:
#include "alt_types.h"

#include "priv/alt_busy_sleep.h"

unsigned int alt_busy_sleep (unsigned int us)
{
 5a4:	defffa04 	addi	sp,sp,-24
 5a8:	dfc00515 	stw	ra,20(sp)
 5ac:	df000415 	stw	fp,16(sp)
 5b0:	df000404 	addi	fp,sp,16
 5b4:	e13fff15 	stw	r4,-4(fp)
  int big_loops;
  alt_u32 cycles_per_loop;
  
  if (!strcmp(NIOS2_CPU_IMPLEMENTATION,"tiny"))
  {
    cycles_per_loop = 9;
 5b8:	00800244 	movi	r2,9
 5bc:	e0bffd15 	stw	r2,-12(fp)
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));
 5c0:	014003f4 	movhi	r5,15
 5c4:	29509004 	addi	r5,r5,16960
 5c8:	e13ffd17 	ldw	r4,-12(fp)
 5cc:	00009140 	call	914 <__mulsi3>
 5d0:	100b883a 	mov	r5,r2
 5d4:	0100bef4 	movhi	r4,763
 5d8:	213c2004 	addi	r4,r4,-3968
 5dc:	00008580 	call	858 <__udivsi3>
  {
    cycles_per_loop = 3;
  }
  

  big_loops = us / (INT_MAX/
 5e0:	100b883a 	mov	r5,r2
 5e4:	01200034 	movhi	r4,32768
 5e8:	213fffc4 	addi	r4,r4,-1
 5ec:	00008580 	call	858 <__udivsi3>
 5f0:	100b883a 	mov	r5,r2
 5f4:	e13fff17 	ldw	r4,-4(fp)
 5f8:	00008580 	call	858 <__udivsi3>
 5fc:	e0bffe15 	stw	r2,-8(fp)
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
 600:	e0bffe17 	ldw	r2,-8(fp)
 604:	10002a26 	beq	r2,zero,6b0 <alt_busy_sleep+0x10c>
  {
    for(i=0;i<big_loops;i++)
 608:	e03ffc15 	stw	zero,-16(fp)
 60c:	00001706 	br	66c <alt_busy_sleep+0xc8>
      /*
      * Do NOT Try to single step the asm statement below 
      * (single step will never return)
      * Step out of this function or set a breakpoint after the asm statements
      */
      __asm__ volatile (
 610:	00a00034 	movhi	r2,32768
 614:	10bfffc4 	addi	r2,r2,-1
 618:	10bfffc4 	addi	r2,r2,-1
 61c:	103ffe1e 	bne	r2,zero,618 <_gp+0xffff7be4>
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
      (cycles_per_loop * 1000000)));
 620:	014003f4 	movhi	r5,15
 624:	29509004 	addi	r5,r5,16960
 628:	e13ffd17 	ldw	r4,-12(fp)
 62c:	00009140 	call	914 <__mulsi3>
        "\n1:"
        "\n\t.pushsection .debug_alt_sim_info"
        "\n\t.int 4, 0, 0b, 1b"
        "\n\t.popsection"
        :: "r" (INT_MAX));
      us -= (INT_MAX/(ALT_CPU_FREQ/
 630:	100b883a 	mov	r5,r2
 634:	0100bef4 	movhi	r4,763
 638:	213c2004 	addi	r4,r4,-3968
 63c:	00008580 	call	858 <__udivsi3>
 640:	100b883a 	mov	r5,r2
 644:	01200034 	movhi	r4,32768
 648:	213fffc4 	addi	r4,r4,-1
 64c:	00008580 	call	858 <__udivsi3>
 650:	1007883a 	mov	r3,r2
 654:	e0bfff17 	ldw	r2,-4(fp)
 658:	10c5c83a 	sub	r2,r2,r3
 65c:	e0bfff15 	stw	r2,-4(fp)
  big_loops = us / (INT_MAX/
  (ALT_CPU_FREQ/(cycles_per_loop * 1000000)));

  if (big_loops)
  {
    for(i=0;i<big_loops;i++)
 660:	e0bffc17 	ldw	r2,-16(fp)
 664:	10800044 	addi	r2,r2,1
 668:	e0bffc15 	stw	r2,-16(fp)
 66c:	e0fffc17 	ldw	r3,-16(fp)
 670:	e0bffe17 	ldw	r2,-8(fp)
 674:	18bfe616 	blt	r3,r2,610 <_gp+0xffff7bdc>
      "\n\tbne %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 678:	014003f4 	movhi	r5,15
 67c:	29509004 	addi	r5,r5,16960
 680:	e13ffd17 	ldw	r4,-12(fp)
 684:	00009140 	call	914 <__mulsi3>
 688:	100b883a 	mov	r5,r2
 68c:	0100bef4 	movhi	r4,763
 690:	213c2004 	addi	r4,r4,-3968
 694:	00008580 	call	858 <__udivsi3>
 698:	e17fff17 	ldw	r5,-4(fp)
 69c:	1009883a 	mov	r4,r2
 6a0:	00009140 	call	914 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 6a4:	10bfffc4 	addi	r2,r2,-1
 6a8:	103ffe1e 	bne	r2,zero,6a4 <_gp+0xffff7c70>
 6ac:	00000d06 	br	6e4 <alt_busy_sleep+0x140>
      "\n\tbgt %0,zero,0b"
      "\n1:"
      "\n\t.pushsection .debug_alt_sim_info"
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
 6b0:	014003f4 	movhi	r5,15
 6b4:	29509004 	addi	r5,r5,16960
 6b8:	e13ffd17 	ldw	r4,-12(fp)
 6bc:	00009140 	call	914 <__mulsi3>
 6c0:	100b883a 	mov	r5,r2
 6c4:	0100bef4 	movhi	r4,763
 6c8:	213c2004 	addi	r4,r4,-3968
 6cc:	00008580 	call	858 <__udivsi3>
 6d0:	e17fff17 	ldw	r5,-4(fp)
 6d4:	1009883a 	mov	r4,r2
 6d8:	00009140 	call	914 <__mulsi3>
    /*
    * Do NOT Try to single step the asm statement below 
    * (single step will never return)
    * Step out of this function or set a breakpoint after the asm statements
    */
    __asm__ volatile (
 6dc:	10bfffc4 	addi	r2,r2,-1
 6e0:	00bffe16 	blt	zero,r2,6dc <_gp+0xffff7ca8>
      "\n\t.int 4, 0, 0b, 1b"
      "\n\t.popsection"
      :: "r" (us*(ALT_CPU_FREQ/(cycles_per_loop * 1000000))));
  }
#endif /* #ifndef ALT_SIM_OPTIMIZE */
  return 0;
 6e4:	0005883a 	mov	r2,zero
}
 6e8:	e037883a 	mov	sp,fp
 6ec:	dfc00117 	ldw	ra,4(sp)
 6f0:	df000017 	ldw	fp,0(sp)
 6f4:	dec00204 	addi	sp,sp,8
 6f8:	f800283a 	ret

000006fc <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
 6fc:	deffff04 	addi	sp,sp,-4
 700:	df000015 	stw	fp,0(sp)
 704:	d839883a 	mov	fp,sp
  for (i = (char*) 0; i < (char*) NIOS2_DCACHE_SIZE; i+= NIOS2_DCACHE_LINE_SIZE)
  { 
    __asm__ volatile ("flushd (%0)" :: "r" (i));
  }
#endif /* NIOS2_DCACHE_SIZE > 0 */
}
 708:	0001883a 	nop
 70c:	e037883a 	mov	sp,fp
 710:	df000017 	ldw	fp,0(sp)
 714:	dec00104 	addi	sp,sp,4
 718:	f800283a 	ret

0000071c <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
 71c:	deffff04 	addi	sp,sp,-4
 720:	df000015 	stw	fp,0(sp)
 724:	d839883a 	mov	fp,sp
#if NIOS2_ICACHE_SIZE > 0
  alt_icache_flush (0, NIOS2_ICACHE_SIZE);
#endif
}
 728:	0001883a 	nop
 72c:	e037883a 	mov	sp,fp
 730:	df000017 	ldw	fp,0(sp)
 734:	dec00104 	addi	sp,sp,4
 738:	f800283a 	ret

0000073c <altera_nios2_qsys_irq_init>:
/*
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_qsys_irq_init(void) 
{
 73c:	deffff04 	addi	sp,sp,-4
 740:	df000015 	stw	fp,0(sp)
 744:	d839883a 	mov	fp,sp
    NIOS2_WRITE_IENABLE(0);
 748:	000170fa 	wrctl	ienable,zero
}
 74c:	0001883a 	nop
 750:	e037883a 	mov	sp,fp
 754:	df000017 	ldw	fp,0(sp)
 758:	dec00104 	addi	sp,sp,4
 75c:	f800283a 	ret

00000760 <__divsi3>:
 760:	20001b16 	blt	r4,zero,7d0 <__divsi3+0x70>
 764:	000f883a 	mov	r7,zero
 768:	28001616 	blt	r5,zero,7c4 <__divsi3+0x64>
 76c:	200d883a 	mov	r6,r4
 770:	29001a2e 	bgeu	r5,r4,7dc <__divsi3+0x7c>
 774:	00800804 	movi	r2,32
 778:	00c00044 	movi	r3,1
 77c:	00000106 	br	784 <__divsi3+0x24>
 780:	10000d26 	beq	r2,zero,7b8 <__divsi3+0x58>
 784:	294b883a 	add	r5,r5,r5
 788:	10bfffc4 	addi	r2,r2,-1
 78c:	18c7883a 	add	r3,r3,r3
 790:	293ffb36 	bltu	r5,r4,780 <_gp+0xffff7d4c>
 794:	0005883a 	mov	r2,zero
 798:	18000726 	beq	r3,zero,7b8 <__divsi3+0x58>
 79c:	0005883a 	mov	r2,zero
 7a0:	31400236 	bltu	r6,r5,7ac <__divsi3+0x4c>
 7a4:	314dc83a 	sub	r6,r6,r5
 7a8:	10c4b03a 	or	r2,r2,r3
 7ac:	1806d07a 	srli	r3,r3,1
 7b0:	280ad07a 	srli	r5,r5,1
 7b4:	183ffa1e 	bne	r3,zero,7a0 <_gp+0xffff7d6c>
 7b8:	38000126 	beq	r7,zero,7c0 <__divsi3+0x60>
 7bc:	0085c83a 	sub	r2,zero,r2
 7c0:	f800283a 	ret
 7c4:	014bc83a 	sub	r5,zero,r5
 7c8:	39c0005c 	xori	r7,r7,1
 7cc:	003fe706 	br	76c <_gp+0xffff7d38>
 7d0:	0109c83a 	sub	r4,zero,r4
 7d4:	01c00044 	movi	r7,1
 7d8:	003fe306 	br	768 <_gp+0xffff7d34>
 7dc:	00c00044 	movi	r3,1
 7e0:	003fee06 	br	79c <_gp+0xffff7d68>

000007e4 <__modsi3>:
 7e4:	20001716 	blt	r4,zero,844 <__modsi3+0x60>
 7e8:	000f883a 	mov	r7,zero
 7ec:	2005883a 	mov	r2,r4
 7f0:	28001216 	blt	r5,zero,83c <__modsi3+0x58>
 7f4:	2900162e 	bgeu	r5,r4,850 <__modsi3+0x6c>
 7f8:	01800804 	movi	r6,32
 7fc:	00c00044 	movi	r3,1
 800:	00000106 	br	808 <__modsi3+0x24>
 804:	30000a26 	beq	r6,zero,830 <__modsi3+0x4c>
 808:	294b883a 	add	r5,r5,r5
 80c:	31bfffc4 	addi	r6,r6,-1
 810:	18c7883a 	add	r3,r3,r3
 814:	293ffb36 	bltu	r5,r4,804 <_gp+0xffff7dd0>
 818:	18000526 	beq	r3,zero,830 <__modsi3+0x4c>
 81c:	1806d07a 	srli	r3,r3,1
 820:	11400136 	bltu	r2,r5,828 <__modsi3+0x44>
 824:	1145c83a 	sub	r2,r2,r5
 828:	280ad07a 	srli	r5,r5,1
 82c:	183ffb1e 	bne	r3,zero,81c <_gp+0xffff7de8>
 830:	38000126 	beq	r7,zero,838 <__modsi3+0x54>
 834:	0085c83a 	sub	r2,zero,r2
 838:	f800283a 	ret
 83c:	014bc83a 	sub	r5,zero,r5
 840:	003fec06 	br	7f4 <_gp+0xffff7dc0>
 844:	0109c83a 	sub	r4,zero,r4
 848:	01c00044 	movi	r7,1
 84c:	003fe706 	br	7ec <_gp+0xffff7db8>
 850:	00c00044 	movi	r3,1
 854:	003ff106 	br	81c <_gp+0xffff7de8>

00000858 <__udivsi3>:
 858:	200d883a 	mov	r6,r4
 85c:	2900152e 	bgeu	r5,r4,8b4 <__udivsi3+0x5c>
 860:	28001416 	blt	r5,zero,8b4 <__udivsi3+0x5c>
 864:	00800804 	movi	r2,32
 868:	00c00044 	movi	r3,1
 86c:	00000206 	br	878 <__udivsi3+0x20>
 870:	10000e26 	beq	r2,zero,8ac <__udivsi3+0x54>
 874:	28000516 	blt	r5,zero,88c <__udivsi3+0x34>
 878:	294b883a 	add	r5,r5,r5
 87c:	10bfffc4 	addi	r2,r2,-1
 880:	18c7883a 	add	r3,r3,r3
 884:	293ffa36 	bltu	r5,r4,870 <_gp+0xffff7e3c>
 888:	18000826 	beq	r3,zero,8ac <__udivsi3+0x54>
 88c:	0005883a 	mov	r2,zero
 890:	31400236 	bltu	r6,r5,89c <__udivsi3+0x44>
 894:	314dc83a 	sub	r6,r6,r5
 898:	10c4b03a 	or	r2,r2,r3
 89c:	1806d07a 	srli	r3,r3,1
 8a0:	280ad07a 	srli	r5,r5,1
 8a4:	183ffa1e 	bne	r3,zero,890 <_gp+0xffff7e5c>
 8a8:	f800283a 	ret
 8ac:	0005883a 	mov	r2,zero
 8b0:	f800283a 	ret
 8b4:	00c00044 	movi	r3,1
 8b8:	003ff406 	br	88c <_gp+0xffff7e58>

000008bc <__umodsi3>:
 8bc:	2005883a 	mov	r2,r4
 8c0:	2900122e 	bgeu	r5,r4,90c <__umodsi3+0x50>
 8c4:	28001116 	blt	r5,zero,90c <__umodsi3+0x50>
 8c8:	01800804 	movi	r6,32
 8cc:	00c00044 	movi	r3,1
 8d0:	00000206 	br	8dc <__umodsi3+0x20>
 8d4:	30000c26 	beq	r6,zero,908 <__umodsi3+0x4c>
 8d8:	28000516 	blt	r5,zero,8f0 <__umodsi3+0x34>
 8dc:	294b883a 	add	r5,r5,r5
 8e0:	31bfffc4 	addi	r6,r6,-1
 8e4:	18c7883a 	add	r3,r3,r3
 8e8:	293ffa36 	bltu	r5,r4,8d4 <_gp+0xffff7ea0>
 8ec:	18000626 	beq	r3,zero,908 <__umodsi3+0x4c>
 8f0:	1806d07a 	srli	r3,r3,1
 8f4:	11400136 	bltu	r2,r5,8fc <__umodsi3+0x40>
 8f8:	1145c83a 	sub	r2,r2,r5
 8fc:	280ad07a 	srli	r5,r5,1
 900:	183ffb1e 	bne	r3,zero,8f0 <_gp+0xffff7ebc>
 904:	f800283a 	ret
 908:	f800283a 	ret
 90c:	00c00044 	movi	r3,1
 910:	003ff706 	br	8f0 <_gp+0xffff7ebc>

00000914 <__mulsi3>:
 914:	0005883a 	mov	r2,zero
 918:	20000726 	beq	r4,zero,938 <__mulsi3+0x24>
 91c:	20c0004c 	andi	r3,r4,1
 920:	2008d07a 	srli	r4,r4,1
 924:	18000126 	beq	r3,zero,92c <__mulsi3+0x18>
 928:	1145883a 	add	r2,r2,r5
 92c:	294b883a 	add	r5,r5,r5
 930:	203ffa1e 	bne	r4,zero,91c <_gp+0xffff7ee8>
 934:	f800283a 	ret
 938:	f800283a 	ret
