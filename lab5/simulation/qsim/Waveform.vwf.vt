// Copyright (C) 2017  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "04/09/2020 08:22:06"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          lab5
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module lab5_vlg_vec_tst();
// constants                                           
// general purpose registers
reg addi;
reg br;
reg brz;
reg clr;
reg mov;
reg mova;
reg movr;
reg movrhs;
reg pause;
reg sr0;
reg srh0;
reg subi;
// wires                                               
wire alu_add_sub;
wire alu_set_high;
wire alu_set_low;
wire commit_branch;
wire decrement_temp;
wire enable_delay_counter;
wire increment_pc;
wire increment_temp;
wire load_temp;
wire [1:0] op1_mux_select;
wire [1:0] op2_mux_select;
wire result_mux_select;
wire [1:0] select_immediate;
wire [1:0] select_write_address;
wire start_delay_counter;
wire write_reg_file;

// assign statements (if any)                          
lab5 i1 (
// port map - connection between master ports and signals/registers   
	.addi(addi),
	.alu_add_sub(alu_add_sub),
	.alu_set_high(alu_set_high),
	.alu_set_low(alu_set_low),
	.br(br),
	.brz(brz),
	.clr(clr),
	.commit_branch(commit_branch),
	.decrement_temp(decrement_temp),
	.enable_delay_counter(enable_delay_counter),
	.increment_pc(increment_pc),
	.increment_temp(increment_temp),
	.load_temp(load_temp),
	.mov(mov),
	.mova(mova),
	.movr(movr),
	.movrhs(movrhs),
	.op1_mux_select(op1_mux_select),
	.op2_mux_select(op2_mux_select),
	.pause(pause),
	.result_mux_select(result_mux_select),
	.select_immediate(select_immediate),
	.select_write_address(select_write_address),
	.sr0(sr0),
	.srh0(srh0),
	.start_delay_counter(start_delay_counter),
	.subi(subi),
	.write_reg_file(write_reg_file)
);
initial 
begin 
#1000000 $finish;
end 

// addi
initial
begin
	addi = 1'b0;
end 

// br
always
begin
	br = 1'b0;
	br = #100000 1'b1;
	#100000;
end 

// brz
initial
begin
	brz = 1'b0;
end 

// clr
initial
begin
	clr = 1'b0;
end 

// mov
initial
begin
	mov = 1'b0;
end 

// mova
initial
begin
	mova = 1'b0;
end 

// movr
initial
begin
	movr = 1'b0;
end 

// movrhs
initial
begin
	movrhs = 1'b0;
end 

// pause
initial
begin
	pause = 1'b0;
end 

// sr0
initial
begin
	sr0 = 1'b0;
end 

// srh0
initial
begin
	srh0 = 1'b0;
end 

// subi
initial
begin
	subi = 1'b0;
end 
endmodule

